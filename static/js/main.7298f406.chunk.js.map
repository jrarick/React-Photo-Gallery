{"version":3,"sources":["Components/SearchForm.js","Components/MainNav.js","Components/Photographs.js","Components/NotFound.js","Components/PhotoContainer.js","config.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","photoSearch","_this","userInput","value","props","history","push","_this2","this","react_default","a","createElement","className","onSubmit","type","name","placeholder","ref","input","required","fill","height","viewBox","width","xmlns","d","React","Component","withRouter","MainNav","react_router_dom","to","Photographs","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchedPhotos","loadedPhotos","map","data","key","id","src","concat","farm","server","secret","alt","title","NotFound","PhotoContainer","state","loading","performSearch","axios","get","then","response","setState","photos","photo","catch","error","console","log","length","Components_NotFound","Components_Photographs","prevProps","Error","App","react_router","path","component","render","Components_PhotoContainer","match","params","exact","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7298f406.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass SearchForm extends React.Component {\r\n\r\n  // Prevent default search behavior and update url for Router\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let photoSearch = '/search/' + this.userInput.value;\r\n    this.props.history.push(photoSearch);\r\n  };\r\n\r\n  // Create ref for form input element to use with handleSubmit() function\r\n  render() {\r\n    return(\r\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n        <input type=\"search\" name=\"search\" placeholder=\"Search\" ref={(input) => this.userInput = input} required/>\r\n        <button type=\"submit\" className=\"search-button\">\r\n          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(SearchForm);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass MainNav extends React.Component {\r\n  render() {\r\n    return(\r\n      <nav className=\"main-nav\">\r\n        <ul>\r\n          <li><NavLink to=\"/search/cats\">Cats</NavLink></li>\r\n          <li><NavLink to=\"/search/dogs\">Dogs</NavLink></li>\r\n          <li><NavLink to=\"/search/birds\">Birds</NavLink></li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainNav;\r\n","import React from 'react';\r\n\r\nclass Photographs extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    // Generate HTML for each photo that was fetched\r\n    const results = this.props.loadedPhotos;\r\n    let searchedPhotos = results.map(data =>\r\n      <li key={data.id}>\r\n        <img\r\n          src={`https://farm${data.farm}.staticflickr.com/${data.server}/${data.id}_${data.secret}.jpg`}\r\n          alt={data.title}\r\n        />\r\n      </li>);\r\n\r\n    return(\r\n      <div className=\"photo-container\">\r\n        <ul>\r\n          {searchedPhotos}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Photographs;\r\n","import React from 'react';\r\n\r\nfunction NotFound() {\r\n  return(\r\n    <li className=\"not-found\">\r\n      <h3>No Results Found</h3>\r\n      <p>You search did not return any results. Please try again.</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport apiKey from '../config';\r\nimport Photographs from './Photographs';\r\nimport NotFound from './NotFound';\r\nimport axios from 'axios';\r\n\r\nclass PhotoContainer extends React.Component {\r\n  // Initialize state for component\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loadedPhotos: [],\r\n      loading: true,\r\n    }\r\n  }\r\n\r\n  // Perform search on page load\r\n  componentWillMount() {\r\n    this.performSearch();\r\n  }\r\n\r\n  // Fetch image data to display on page\r\n    performSearch() {\r\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${this.props.userInput}&per_page=16&format=json&nojsoncallback=1`)\r\n      .then(response => {\r\n        this.setState({\r\n          loadedPhotos: response.data.photos.photo,\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log('Could not fetch data', error);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    // Render Loading component if fetching data\r\n    if (this.state.loading) {\r\n      return(\r\n        <div className=\"photo-container\">\r\n          <h2>Results</h2>\r\n          <p>Loading, please wait</p>\r\n        </div>\r\n      );\r\n    }\r\n    // Render Not Found component if no results are found\r\n    if (this.state.loadedPhotos.length === 0) {\r\n      return(\r\n        <NotFound />\r\n      );\r\n    }\r\n    // Render Photo Container if matches are found\r\n    return(\r\n      <div className=\"photo-container\">\r\n        <h2>Results</h2>\r\n        <ul>\r\n          <Photographs loadedPhotos={this.state.loadedPhotos}/>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Update component with new images when user submits new text\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.userInput !== prevProps.userInput) {\r\n      this.setState({\r\n        loadedPhotos: [],\r\n        loading: true\r\n      })\r\n      this.performSearch(this.props.userInput);\r\n    }\r\n  }\r\n\r\n} // End PhotoContainer Component\r\n\r\nexport default PhotoContainer;\r\n","const apiKey = '28d5e6212417ba0d75d27423689fa833';\r\nexport default apiKey;\r\n","import React from 'react';\r\n\r\nfunction Error() {\r\n  return(\r\n    <li className=\"not-found\">\r\n      <h3>Error</h3>\r\n      <p>The page you are looking for does not exist!</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import React, { Component } from 'react';\nimport {\n  HashRouter,\n  Route,\n  Switch } from 'react-router-dom';\n\nimport SearchForm from './Components/SearchForm';\nimport MainNav from './Components/MainNav';\nimport PhotoContainer from './Components/PhotoContainer';\nimport Error from './Components/Error'\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"container\">\n          <Route path=\"/\" component={SearchForm} />\n          <Route path=\"/\" component={MainNav} />\n\n          <Switch>\n            <Route path=\"/search/:userInput\" render={(props) => <PhotoContainer userInput={props.match.params.userInput} />} />\n            <Route exact path=\"/\" render={() => <PhotoContainer userInput=\"treehouse\" />} />\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}